id: sysmon-ocsf
name: Sysmon OCSF Mappings
author: Tenzir
author_icon: https://raw.githubusercontent.com/tenzir/library/main/author.svg
package_icon: |
  https://raw.githubusercontent.com/tenzir/library/main/sysmon-ocsf/package.svg
description: |
  Transforms Sysmon events into OCSF. Sysmon is a Windows system service and
  device driver that logs system activity to the Windows Event Log. OCSF is a
  vendor-agnostic schema for security events that enables normalization and
  analysis across different security tools.

  The package detects whether the events have been generated by NXLog and adapts
  the event accordingly.

  To use the pipelines, publish your events to the topic `sysmon` and the
  package will convert them to OCSF and publish them on the topic `ocsf`.
categories:
- mappings

pipelines:
  sysmon-event-id-1:
    name: Sysmon Event ID 1 â†’ OCSF Process Activity
    definition: |
      subscribe "sysmon"
      let $algorithms = {
        MD5: 1,
        SHA1: 2,
        SHA256: 3,
        SHA512: 4,
      }
      assert sysmon.Task == 1 // 1 = Process Create
      drop sysmon.Task
      // --- Classification ---
      ocsf.activity_id = 1
      ocsf.category_uid = 1
      ocsf.class_uid = 1007
      ocsf.category_name = "System Activity" // soon auto-completed
      ocsf.class_name = "Process Activity"   // soon auto-completed
      ocsf.type_uid = 100701                 // soon auto-completed
      ocsf.severity_id = 1
      // --- Occurrence ---
      ocsf.time = move sysmon.UtcTime
      // --- Context ---
      ocsf.metadata = {
        loggers: [],
        log_name: move sysmon.Channel,
        log_version: move sysmon.Version,
        product: {
          name: "System Monitor (Sysmon)",
          uid: (move sysmon.ProviderGuid).slice(begin=1, end=-1),
          vendor_name: "Microsoft Sysinternals",
          version: "v15.0", // just guessing
        },
        original_time: (move sysmon.EventTime).string(),
        version: "1.5.0",
      }
      drop sysmon.SourceName // "Microsoft-Windows-Sysmon", implied above
      drop sysmon.Company   // "Microsoft Corporation", implied above
      if (sysmon.SourceModuleName != null) {
        // We have NXLog.
        assert sysmon.EventID == 1 // this is why we are here
        drop sysmon.EventID
        ocsf.metadata.logged_time = move sysmon.EventReceivedTime
        ocsf.metadata.loggers = ocsf.metadata.loggers.append({
          name: "NXLog",
          log_provider: move sysmon.SourceModuleType,
          log_name: move sysmon.SourceModuleName,
        })
        ocsf.metadata.uid = move sysmon.RecordNumber
        ocsf.raw_data_size = sysmon.Message.length_bytes()
        ocsf.raw_data = move sysmon.Message
        // TODO: decide how to incorporate these NXLog-injected fields.
        // - AccountName
        // - AccountType
        // - Category
        // - Domain
        // - Severity
        // - SeverityValue
      }
      // --- Primary ---
      ocsf.actor = {
        process: {
          pid: null,
        }
      }
      ocsf.device = {
        hostname: move sysmon.Hostname,
      }
      user = (move sysmon.User).split("\\")
      parent_user = (move sysmon.ParentUser).split("\\")
      ocsf.process = {
        cmd_line: move sysmon.CommandLine,
        file: {
          desc: move sysmon.Description,
          ext: sysmon.Image.split(".", reverse=true, max=1)[1]?,
          hashes: (move sysmon.Hashes).split(",").map(x, x.split("=")).map(xs, {
            algorithm_id: $algorithms[xs[0]]? else 0,
            value: xs[1],
          }),
          name: move sysmon.OriginalFileName,
          path: move sysmon.Image,
          product: move sysmon.Product,
          user: {
            domain: user[0],
            name: user[1],
          },
          version: move sysmon.FileVersion,
        },
        pid: (move sysmon.ProcessID).int(),
        uid: (move sysmon.ProcessGuid).slice(begin=1, end=-1),
        parent_process: {
          cmd_line: move sysmon.ParentCommandLine,
          file: {
            path: move sysmon.ParentImage,
          },
          pid: (move sysmon.ParentProcessId).int(),
          uid: (move sysmon.ParentProcessGuid).slice(begin=1, end=-1),
          user: {
            domain: parent_user[0],
            name: parent_user[1],
          },
        },
        session: {
          uid: move sysmon.LogonId,
          uid_alt: (move sysmon.TerminalSessionId).string(), // TODO: find a better place
          uuid: (move sysmon.LogonGuid).slice(begin=1, end=-1),
        },
        tid: move sysmon.ThreadID,
        user: {
          uid: move sysmon.UserID,
        },
        working_directory: move sysmon.CurrentDirectory,
      }
      ocsf.status_id = 1 // success
      // Assemble it
      this = {...ocsf, unmapped: sysmon.print_ndjson()}
      publish "ocsf"
