---
name: Umbrella DNS to OCSF DNS Activity
description: |-
  Maps CISCO Umbrella DNS logs to OCSF DNS Activity events.
---

subscribe "cisco"
where @name == "cisco.umbrella.dns"
// Move original event into dedicated field.
this = { event: this }
// Assign some intermediate values for use in the next step, e.g., because
// they're used multiple times.
activity_id = 1
// event.query_type looks like e.g. `16 (TXT)`
query_type = event.query_type.parse_grok(r"%{NUMBER:value} \(%{WORD:name}\)")
query = {
  hostname: event.domain,
  type: query_type.name,
}
let $ocsf_rcode_mapping = {
  NOERROR: {
    rcode_id: 0,
    rcode: "NoError",
  },
  FORMERROR: {
    rcode_id: 1,
    rcode: "FormError",
  },
  SERVERROR: {
    rcode_id: 2,
    rcode: "ServError",
  },
  SERVFAIL: {
    rcode_id: 2,
    rcode: "ServError",
  },
  NXDOMAIN: {
    rcode_id: 3,
    rcode: "NxDomain",
  },
  NOTIMP: {
    rcode_id: 4,
    rcode: "NotImp",
  },
  REFUSED: {
    rcode_id: 5,
    rcode: "Refused",
  },
  YXDOMAIN: {
    rcode_id: 6,
    rcode: "YXDomain",
  },
  YXRRSET: {
    rcode_id: 7,
    rcode: "YXRRSet",
  },
  NXRRSET: {
    rcode_id: 8,
    rcode: "NXRRSet",
  },
  NOTAUTH: {
    rcode_id: 9,
    rcode: "NotAuth",
  },
  NOTZONE: {
    rcode_id: 10,
    rcode: "NotZone",
  },
  DSOTYPENI: {
    rcode_id: 11,
    rcode: "DSOTYPENI",
  },
  BADSIG_VERS: {
    rcode_id: 16,
    rcode: "BADSIG_VERS",
  },
  BADKEY: {
    rcode_id: 17,
    rcode: "BADKEY",
  },
  BADTIME: {
    rcode_id: 18,
    rcode: "BADTIME",
  },
  BADMODE: {
    rcode_id: 19,
    rcode: "BADMODE",
  },
  BADNAME: {
    rcode_id: 20,
    rcode: "BADNAME",
  },
  BADALG: {
    rcode_id: 21,
    rcode: "BADALG",
  },
  BADTRUNC: {
    rcode_id: 22,
    rcode: "BADTRUNC",
  },
  BADCOOKIE: {
    rcode_id: 23,
    rcode: "BADCOOKIE",
  },
  UNASSIGNED: {
    rcode_id: 24,
    rcode: "Unassigned",
  },
  OTHER: {
    rcode_id: 99,
    rcode: "Other",
  },
}
if event.response_code == null {
  rcode_id = 99
  rcode = "Other"
} else {
  rcode_id = $ocsf_rcode_mapping[event.response_code].rcode_id.otherwise(99)
  rcode = $ocsf_rcode_mapping[event.response_code].rcode.otherwise(event.response_code)
}
if event.action == "Denied" {
  action_id = 2
} else if event.action == "Allowed" {
  action_id = 1
} else {
  action_id = 0
}
action = event.action
// Populate the OCSF event.
this = {
  // --- Classification (required) ---
  type_uid: 400301,
  severity_id: 1,
  class_uid: 4003,
  category_uid: 4,
  activity_id: activity_id,
  // --- Context ---
  metadata: {
    product: {
      name: "Umbrella",
      vendor_name: "Cisco",
    },
    version: "1.3.0",
    profiles: ["security_control"]
  },
  unmapped: event,
  // --- Primary ---
  time: time(event.timestamp),
  src_endpoint: {
    ip: event.external_ip,
  },
  dst_endpoint: {
    name: "Cisco Umbrella DNS",
  },
  status_id: 1,
  rcode_id: rcode_id,
  rcode: rcode,
  query: query,
  // --- Security Control Profile ---
  action_id: action_id,
  action: action,
}
// Drop all mapped fields, with the effect that the remaining fields remain
// in unmapped.
drop(
  unmapped.timestamp,
  unmapped.external_ip,
  unmapped.response_code,
  unmapped.action,
  unmapped.query_type,
  unmapped.domain,
)
// Assign a new schema name to the transformed event.
@name = "ocsf.dns_activity"
publish "ocsf"
