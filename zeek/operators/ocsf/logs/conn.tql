// TODO: support frontmatter in UDOs.
//---
//description: |
//  Maps Zeek's conn.log to OCSF Network Activity events.
//---

// --- Preamble ---------------------------------

this = { zeek: this }
zeek::ocsf::map_common

// --- OCSF: classification attributes ----------

// The ground truth for connection state mapping is here:
// https://github.com/zeek/zeek/blob/6671e95c6b07dfd59a12ec5507a5c3eb91f163ef/scripts/base/protocols/conn/main.zeek#L184
let $conn_states = {
  // S0 means only a SYN seen and S1 the full handshake.
  S0: 1,
  S1: 1,
  // Only SF means Close.
  SF: 2,
  // The RST* states imply connection reset.
  RSTO: 3,
  RSTOH: 3,
  RSTOS0: 3,
  RSTR: 3,
  RSTRH: 3,
  // SH, SHR, S2, and S3 correspond to one-sided closure, which we
  // treat as Fail to be able to differentiate in analytics.
  S2: 4,
  S3: 4,
  SH: 4,
  SHR: 4,
  // Only REJ is rejection at the beginning of the connection.
  REJ: 5,
  // Connections Zeek couldn't classify.
  OTH: 6,
}
let $activity_names = [
  "Unknown",
  "Open",
  "Close",
  "Reset",
  "Fail",
  "Refuse",
  "Traffic",
  "Listen",
  "Other",
]
ocsf.activity_id = $conn_states[zeek.conn_state]? else 6
ocsf.activity_name = $activity_names[ocsf.activity_id]? else "Other"
ocsf.class_uid = 4001
ocsf.class_name = "Network Activity"
ocsf.severity_id = 1
ocsf.severity = "Informational"
ocsf.type_uid = ocsf.class_uid * 100 + ocsf.activity_id

// --- OCSF: context attributes -----------------

ocsf.metadata.log_name = "conn.log"
ocsf.app_name = move zeek.service

// --- OCSF: primary attributes -----------------

ocsf.connection_info.flag_history = move zeek.history
if zeek.local_orig? != null and zeek.local_resp? != null {
  if zeek.local_orig and zeek.local_resp {
    ocsf.connection_info.direction = "Lateral"
    ocsf.connection_info.direction_id = 3
  } else if zeek.local_orig {
    ocsf.connection_info.direction = "Outbound"
    ocsf.connection_info.direction_id = 2
  } else if zeek.local_resp {
    ocsf.connection_info.direction = "Inbound"
    ocsf.connection_info.direction_id = 1
  } else {
    ocsf.connection_info.direction = "Unknown"
    ocsf.connection_info.direction_id = 0
  }
  drop zeek.local_orig, zeek.local_resp
}
ocsf.status = "Other"
ocsf.status_code = move zeek.conn_state
ocsf.status_id = 99
ocsf.traffic = {
  bytes_in: move zeek.resp_bytes,
  bytes_out: move zeek.orig_bytes,
  bytes_missed: move zeek.missed_bytes,
  packets_in: move zeek.resp_pkts,
  packets_out: move zeek.orig_pkts,
}
ocsf.traffic.bytes = ocsf.traffic.bytes_in + ocsf.traffic.bytes_out
ocsf.traffic.packets = ocsf.traffic.packets_in + ocsf.traffic.packets_out

// --- Finalize ---------------------------------

this = {...ocsf, unmapped: zeek}
@name = "ocsf.network_activity"