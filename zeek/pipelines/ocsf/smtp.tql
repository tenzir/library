---
name: smtp.log to OCSF Email Activity
description: |
  Maps Zeek's smtp.log to OCSF Email Activity events.
---

// TODO:
// - Generate one Email URL Activity event for each element in the `url`
//   array, linking the resulting events via a shared UUID.
// - Surface Zeek file UIDs (`fuids`) for corresponding Network File Activity
//   events when possible.
subscribe "zeek"
where @name == "zeek.smtp"
this = { zeek: this }
// === Classification ===
ocsf.activity_id = 1
ocsf.activity_name = "Send"
ocsf.category_uid = 4
ocsf.category_name = "Network Activity"
ocsf.class_uid = 4009
ocsf.class_name = "Email Activity"
ocsf.severity_id = 1
ocsf.severity = "Informational"
ocsf.type_uid = ocsf.class_uid * 100 + ocsf.activity_id
// === Occurrence ===
move ocsf.time = zeek.ts
// === Context ===
ocsf.metadata = {
  log_name: "smtp.log",
  logged_time: move zeek._write_ts?,
  product: {
    name: "Zeek",
    vendor_name: "Zeek",
    cpe_name: "cpe:2.3:a:zeek:zeek",
  },
  uid: move zeek.uid,
  version: "1.4.0",
}
drop zeek._path? // implied in metadata.log_name
// === Primary ===
ocsf.src_endpoint = {
  ip: zeek.id.orig_h,
  port: zeek.id.orig_p,
}
ocsf.dst_endpoint = {
  ip: zeek.id.resp_h,
  port: zeek.id.resp_p,
  intermediate_ips: move zeek.path,
}
drop zeek.id
ocsf.email = {
  from: move zeek.from,
  to: move zeek.to,
  cc: move zeek.cc?,
  reply_to: move zeek.reply_to?,
  message_uid: move zeek.msg_id,
  smtp_from: move zeek.mailfrom,
  smtp_to: move zeek.rcptto,
  subject: move zeek.subject,
}
move ocsf.smtp_hello = zeek.helo
move ocsf.status_detail = zeek.last_reply
this = {...ocsf, unmapped: zeek}
@name = "ocsf.email_activity"
publish "ocsf"
