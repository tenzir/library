---
name: conn.log to OCSF Network Activity
description: |
  Maps Zeek's conn.log to OCSF Network Activity events.
---

// The ground truth for connection state mapping is here:
// https://github.com/zeek/zeek/blob/6671e95c6b07dfd59a12ec5507a5c3eb91f163ef/scripts/base/protocols/conn/main.zeek#L184
let $conn_states = {
  // S0 means only a SYN seen and S1 the full handshake.
  S0: 1,
  S1: 1,
  // Only SF means Close.
  SF: 2,
  // The RST* states imply connection reset.
  RSTO: 3,
  RSTOH: 3,
  RSTOS0: 3,
  RSTR: 3,
  RSTRH: 3,
  // SH, SHR, S2, and S3 correspond to one-sided closure, which we
  // treat as Fail to be able to differentiate in analytics.
  S2: 4,
  S3: 4,
  SH: 4,
  SHR: 4,
  // Only REJ is rejection at the beginning of the connection.
  REJ: 5,
  // Connections Zeek couldn't classify.
  OTH: 6,
}
let $activity_names = [
  "Unknown",
  "Open",
  "Close",
  "Reset",
  "Fail",
  "Refuse",
  "Traffic",
  "Listen",
  "Other",
]
let $proto_nums = {
  tcp: 6,
  udp: 17,
  icmp: 1,
  icmpv6: 58,
  ipv6: 41,
}
subscribe "zeek"
where @name == "zeek.conn"
this = { zeek: this }
// === Classification ===
ocsf.activity_id = $conn_states[zeek.conn_state]? else 6
ocsf.activity_name = $activity_names[ocsf.activity_id]? else "Other"
ocsf.category_uid = 4
ocsf.category_name = "Network Activity"
ocsf.class_uid = 4001
ocsf.class_name = "Network Activity"
ocsf.severity_id = 1
ocsf.severity = "Informational"
ocsf.type_uid = ocsf.class_uid * 100 + ocsf.activity_id
// === Occurrence ===
move ocsf.time = zeek.ts
ocsf.duration = zeek.duration.count_milliseconds().round()
ocsf.start_time = ocsf.time
ocsf.end_time = ocsf.time + move zeek.duration
// === Context ===
ocsf.metadata = {
  log_name: "conn.log",
  logged_time: move zeek._write_ts?,
  product: {
    name: "Zeek",
    vendor_name: "Zeek",
    cpe_name: "cpe:2.3:a:zeek:zeek",
  },
  uid: move zeek.uid,
  version: "1.4.0",
}
drop zeek._path? // implied in metadata.log_name
move ocsf.app_name = zeek.service
// === Primary ===
ocsf.src_endpoint = {
  ip: zeek.id.orig_h,
  port: zeek.id.orig_p,
  mac: move zeek.orig_l2_addr?,
  location: {
    country: move zeek.orig_cc?,
  }
}
ocsf.dst_endpoint = {
  ip: zeek.id.resp_h,
  port: zeek.id.resp_p,
  mac: move zeek.resp_l2_addr?,
  location: {
    country: move zeek.resp_cc?,
  }
}
ocsf.connection_info = {
  community_uid: move zeek.community_id?,
  flag_history: move zeek.history,
  protocol_name: move zeek.proto,
  protocol_num: $proto_nums[zeek.proto]? else -1
}
if zeek.id.orig_h.is_v6() or zeek.id.resp_h.is_v6() {
  ocsf.connection_info.protocol_ver_id = 6
} else {
  ocsf.connection_info.protocol_ver_id = 4
}
drop zeek.id
if zeek.local_orig? != null and zeek.local_resp? != null {
  if zeek.local_orig and zeek.local_resp {
    ocsf.connection_info.direction = "Lateral"
    ocsf.connection_info.direction_id = 3
  } else if zeek.local_orig {
    ocsf.connection_info.direction = "Outbound"
    ocsf.connection_info.direction_id = 2
  } else if zeek.local_resp {
    ocsf.connection_info.direction = "Inbound"
    ocsf.connection_info.direction_id = 1
  } else {
    ocsf.connection_info.direction = "Unknown"
    ocsf.connection_info.direction_id = 0
  }
  drop zeek.local_orig, zeek.local_resp
}
ocsf.status = "Other"
move ocsf.status_code = zeek.conn_state
ocsf.status_id = 99
ocsf.traffic = {
  bytes_in: move zeek.resp_bytes,
  bytes_out: move zeek.orig_bytes,
  bytes_missed: move zeek.missed_bytes,
  packets_in: move zeek.resp_pkts,
  packets_out: move zeek.orig_pkts,
  bytes: zeek.orig_bytes + zeek.resp_bytes,
  packets: zeek.orig_pkts + zeek.resp_pkts,
}
this = {...ocsf, unmapped: zeek}
@name = "ocsf.network_activity"
publish "ocsf"
