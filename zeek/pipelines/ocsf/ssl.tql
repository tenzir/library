---
name: ssl.log to OCSF Network Activity
description: |
  Maps Zeek's ssl.log to OCSF Network Activity events.
---

// Converted from:
// https://github.com/zeek/zeek/blob/fdf887ce3bd80e0b466a973d5063c5882303d282/scripts/base/protocols/ssl/consts.zeek#L113
let $alert_codes = {
  close_notify: 0,
  unexpected_message: 10,
  bad_record_mac: 20,
  decryption_failed: 21,
  record_overflow: 22,
  decompression_failure: 30,
  handshake_failure: 40,
  no_certificate: 41,
  bad_certificate: 42,
  unsupported_certificate: 43,
  certificate_revoked: 44,
  certificate_expired: 45,
  certificate_unknown: 46,
  illegal_parameter: 47,
  unknown_ca: 48,
  access_denied: 49,
  decode_error: 50,
  decrypt_error: 51,
  export_restriction: 60,
  protocol_version: 70,
  insufficient_security: 71,
  internal_error: 80,
  inappropriate_fallback: 86,
  user_canceled: 90,
  no_renegotiation: 100,
  unsupported_extension: 110,
  certificate_unobtainable: 111,
  unrecognized_name: 112,
  bad_certificate_status_response: 113,
  bad_certificate_hash_value: 114,
  unknown_psk_identity: 115,
  certificate_required: 116, // RFC8446
  no_application_protocol: 120,
  ech_required: 121, // draft-ietf-tls-esni-17
}
subscribe "zeek"
where @name == "zeek.ssl"
this = { zeek: this }
// === Classification ===
ocsf.activity_id = 6
ocsf.activity_name = "Traffic"
ocsf.category_uid = 4
ocsf.category_name = "Network Activity"
ocsf.class_uid = 4001
ocsf.class_name = "Network Activity"
ocsf.severity_id = 1
ocsf.severity = "Informational"
ocsf.type_uid = ocsf.class_uid * 100 + ocsf.activity_id
// === Occurrence ===
ocsf.time = zeek.ts
drop zeek.ts
// === Context ===
ocsf.metadata = {
  log_name: "ssl.log",
  logged_time: move zeek._write_ts?,
  product: {
    name: "Zeek",
    vendor_name: "Zeek",
    cpe_name: "cpe:2.3:a:zeek:zeek",
  },
  uid: move zeek.uid,
  version: "1.4.0",
}
drop zeek._path? // implied in metadata.log_name
ocsf.tls = {
  certificate: {
    issuer: move zeek.issuer,
    subject: move zeek.subject,
  },
  cipher: move zeek.cipher,
  ja3_hash: {
    algorithm_id: 1,
    value: move zeek.ja3?,
  },
  ja3s_hash: {
    algorithm_id: 1,
    value: move zeek.ja3s?,
  },
  sni: move zeek.server_name,
  version: move zeek.version,
}
// NB: If we have an alert, `ssl_history` also contains [lL].
if zeek.last_alert != null {
  ocsf.tls.alert = $alert_codes[zeek.last_alert]
}
// === Primary ===
ocsf.src_endpoint = {
  ip: zeek.id.orig_h,
  port: zeek.id.orig_p,
}
ocsf.dst_endpoint = {
  ip: zeek.id.resp_h,
  port: zeek.id.resp_p,
}
ocsf.connection_info = {
  protocol_name: "tcp",
  protocol_num: 6,
}
if zeek.id.orig_h.is_v6() or zeek.id.resp_h.is_v6() {
  ocsf.connection_info.protocol_ver_id = 6
} else {
  ocsf.connection_info.protocol_ver_id = 4
}
drop zeek.id
if not zeek.established or zeek.last_alert != null {
  ocsf.status_id = 2
  ocsf.status = "Failure"
  ocsf.status_detail = zeek.last_alert
} else if validation_status? == "ok" {
  // There could be more `validation_status` values that mean success,
  // but it's difficult to find them. In Zeek, we'd need to grep through
  // all invocations of `x509_result_record` and trace the arguments.
  //
  // Going with just "ok" here is simply going off empirical data.
  ocsf.status_id = 1
  ocsf.status = "Success"
  move ocsf.status_detail = zeek.validation_status
} else {
  ocsf.status_id = 0
  ocsf.status = "Unknown"
  move ocsf.status_detail = zeek.validation_status
}
drop zeek.last_alert
this = {...ocsf, unmapped: zeek}
@name = "ocsf.network_activity"
publish "ocsf"
