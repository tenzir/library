---
name: dhcp.log to OCSF DHCP Activity
description: |
  Maps Zeek's dhcp.log to OCSF DHCP Activity events.
---

let $msg_types = {
  DISCOVER: 1,
  OFFER: 2,
  REQUEST: 3,
  DECLINE: 4,
  ACK: 5,
  NAK: 6,
  RELEASE: 7,
  INFORM: 8,
}
subscribe "zeek"
where @name == "zeek.dhcp"
// Zeek's DHCP log is an aggregation of multiple packets that constitute a
// DORA "session". See https://docs.zeek.org/en/master/logs/dhcp.html for
// details. In OCSF, an event represents a single DORA message, which is
// why we simply unroll the array.
// Note that Zeek doesn't emit an event when DHCP lease expires, so there is no
// EXPIRE message type.
this = { zeek: this }
unroll zeek.msg_types
// === Classification ===
ocsf.activity_id = $msg_types[zeek.msg_types] else 0
if ocsf.activity_id == 0 {
  ocsf.activity_name = "Other"
} else {
  ocsf.activity_name = to_title(move zeek.msg_types)
}
ocsf.category_uid = 4
ocsf.category_name = "Network Activity"
ocsf.class_uid = 4004
ocsf.class_name = "DHCP Activity"
ocsf.severity_id = 1
ocsf.severity = "Informational"
ocsf.type_uid = ocsf.class_uid * 100 + ocsf.activity_id
// === Occurrence ===
move ocsf.time = zeek.ts
// The duration is the time from the first to the last DORA message that
// Zeek aggregates into a single log.
ocsf.duration = zeek.duration.count_milliseconds().round()
ocsf.start_time = ocsf.time
ocsf.end_time = ocsf.time + move zeek.duration
// === Context ===
ocsf.metadata = {
  log_name: "dhcp.log",
  logged_time: move zeek._write_ts?,
  product: {
    name: "Zeek",
    vendor_name: "Zeek",
    cpe_name: "cpe:2.3:a:zeek:zeek",
  },
  // The `uids` field in the DHCP log is an array of all conn UIDs.
  uid: sort(move zeek.uids).join(","),
  version: "1.4.0",
}
drop zeek._path? // implied in metadata.log_name
// === Primary ===
ocsf.connection_info = {
  protocol_name: "udp",
  protocol_num: 17,
}
if zeek.id?.resp_h? == null {
  ocsf.connection_info.protocol_ver_id = 0
} else if zeek.id.resp_h.is_v6() {
  ocsf.connection_info.protocol_ver_id = 6
} else {
  ocsf.connection_info.protocol_ver_id = 4
}
ocsf.src_endpoint = {
  hostname: move zeek.host_name?,
  // client_addr is preferred, in case we don't have
  // that we attempt to use assigned_addr.
  ip: move zeek.client_addr? else zeek.assigned_addr?,
  domain: move zeek.client_fqdn?,
  mac: move zeek.mac?,
}
ocsf.dst_endpoint = {
  ip: move zeek.server_addr?,
  domain: move zeek.domain?,
}
ocsf.lease_dur = (move zeek.lease_time?).count_seconds().round()
ocsf.transaction_uid = (move zeek.trans_id).string()
this = {...ocsf, unmapped: zeek}
@name = "ocsf.dhcp_activity"
publish "ocsf"
