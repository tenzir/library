---
name: Sophos Web Filtering Blocked to OCSF Remediation Activity
---

let $severity = {
  low: {name: "Low", id: 2},
  medium: {name: "Medium", id: 3},
  high: {name: "High", id: 4},
  critical: {name: "Critical", id: 5},
}
let $endpoint_type = {
  mobile: {name: "Mobile", id: 5},
  computer: {name: "Desktop", id: 3},
  server: {name: "Server", id: 1},
  security_vm: {name: "Virtual", id: 6},
  sensor: {name: "Other", id: 99},
  utm: {name: "Other", id: 99},
  access_point: {name: "Other", id: 99},
  wireless_network: {name: "Other", id: 99},
  mailbox: {name: "Other", id: 99},
  slec: {name: "Other", id: 99},
  xgfirewall: {name: "Firewall", id: 9},
  ztna_gateway: {name: "Router", id: 12},
  nta_appliance: {name: "IDS", id: 13},
}
subscribe "sophos"
where @name == "sophos.event"
where type == "Event::Endpoint::WebFilteringBlocked"
this = { event: this }
class_uid = 7001
activity_id = 1
// TODO: how do we use this rather valuable information properly?
//xs = event.name.parse_grok("%{DATA}\\\"%{DATA:subject}\\\"%{DATA}\\\"%{DATA:malware}\\\".")
this = {
  // --- Classification (required) ---
  activity_id: activity_id,
  category_uid: 7,
  class_uid: class_uid,
  type_uid: class_uid * 100 + activity_id,
  severity_id: $severity[event.severity].id.otherwise(0),
  // --- Classification (optional) ---
  activity_name: "Isolate",
  category_name: "Remediation",
  class_name: "Remediation Activity",
  severity: $severity[event.severity].name.otherwise("Unknown"),
  type_name: "Remediation: Isolate",
  // --- Occurrence (required) ---
  time: event.when,
  // --- Context (required) ---
  metadata: {
    log_name: event.type,
    logged_time: event.created_at,
    product: {
      name: "Sophos",
      vendor_name: "Sophos",
    },
    uid: event.id,
    version: "1.4.0",
    profiles : ["host"],
  },
  // --- Context (optional) ---
  unmapped: event,
  // --- Primary (required) ---
  command_uid: event.type.split("::")[-1],
  // --- Primary (recommended) ---
  message: event.name,
  // --- Primary (optional) ---
  // --- Host Profile ---
  device: {
    desc: event.endpoint_type,
    type_id: $endpoint_type[event.endpoint_type].id,
    type: $endpoint_type[event.endpoint_type].name,
    uid: event.endpoint_id,
    name: event.location,
  },
  actor: {
    user: {
      name: event.source,
      uid: event.user_id,
      organization: {
        uid: event.customer_id,
      },
    },
  },
}
// Drop all mapped fields.
drop(
  unmapped.created_at,
  unmapped.when,
  unmapped.id,
  unmapped.name,
  unmapped.severity,
  unmapped.location,
  unmapped.endpoint_id,
  unmapped.endpoint_type,
  unmapped.source,
  unmapped.user_id,
  unmapped.type,
  unmapped.customer_id,
)
@name = "ocsf.remediation_activity"
publish "ocsf"
