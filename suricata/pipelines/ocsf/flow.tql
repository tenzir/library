---
name: Suricata Flow to OCSF Network Activity
description: |
  Maps Suricata Flow events to an OCSF Network Activity event.
restart-on-error: 5m
---

let $proto_nums = {
  TCP: 6,
  UDP: 17,
  ICMP: 1,
}
subscribe "suricata"
where @name == "suricata.flow"
this = { suricata: this }
// === Classification ===
ocsf.activity_id = 6
ocsf.category_uid = 4
ocsf.class_uid = 4001
ocsf.severity_id = 1
ocsf.type_uid = 400106
// === Occurrence ===
ocsf.time = move suricata.timestamp
ocsf.duration = (suricata.flow.end - suricata.flow.start).count_milliseconds().round()
ocsf.end_time = move suricata.flow.end
ocsf.start_time = move suricata.flow.start
// === Context ===
ocsf.metadata = {
  log_name: move suricata.event_type,
  product: {
    name: "Suricata",
    vendor_name: "Open Information Security Foundation",
  },
  uid: string(move suricata.flow_id),
  version: "1.4.0",
}
// === Primary ===
ocsf.connection_info.community_uid = move suricata.community_id
if suricata.src_ip.is_v6() or suricata.dest_ip.is_v6() {
  ocsf.connection_info.protocol_ver_id = 6
} else {
  ocsf.connection_info.protocol_ver_id = 4
}
ocsf.connection_info.protocol_name = suricata.proto.to_lower()
ocsf.connection_info.protocol_num = $proto_nums.get(move suricata.proto, -1)
ocsf.dst_endpoint = {
  ip: move suricata.dest_ip,
  port: move suricata.dest_port,
}
ocsf.src_endpoint = {
  ip: move suricata.src_ip,
  port: move suricata.src_port,
}
ocsf.traffic = {
  bytes_in: move suricata.flow.bytes_toclient,
  bytes_out: move suricata.flow.bytes_toserver,
  packets_in: move suricata.flow.pkts_toclient,
  packets_out: move suricata.flow.pkts_toserver,
  bytes: move suricata.flow.bytes_toclient + move suricata.flow.bytes_toserver,
  packets: move suricata.flow.pkts_toclient + move suricata.flow.pkts_toserver,
}
ocsf.status = "Other"
this = {...ocsf, unmapped: suricata}
@name = "ocsf.network_activity"
publish "ocsf"
