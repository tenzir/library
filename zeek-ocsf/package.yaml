id: zeek-ocsf
name: Zeek OCSF Mappings
author: Tenzir
author_icon: https://github.com/tenzir.png
package_icon: |
  https://raw.githubusercontent.com/tenzir/library/main/zeek-ocsf/package.png
description: |
  [Zeek](https://zeek.org) is an open-source network security monitor that
  provides rich event logs.

  This package converts all Zeek events published on the topic `zeek` to OCSF.

pipelines:
  map-conn-to-ocsf:
    name: conn.log to OCSF Network Activity
    description: Maps Zeek connection logs to OCSF Network Activity.
    definition: |
      // tql2
      subscribe "zeek"
      where @name == "zeek.conn"
      this = { event: this }
      class_uid = 4001
      activity_id = 6
      activity_name = "Traffic"
      if event.local_orig and event.local_resp {
        direction = "Lateral"
        direction_id = 3
      } else if event.local_orig {
        direction = "Outbound"
        direction_id = 2
      } else if event.local_resp {
        direction = "Inbound"
        direction_id = 1
      } else {
        direction = "Unknown"
        direction_id = 0
      }
      if event.proto == "tcp" {
        protocol_num = 6
      } else if event.proto == "udp" {
        protocol_num = 17
      } else if event.proto == "icmp" {
        protocol_num = 1
      } else {
        protocol_num = -1
      }
      if event.id.orig_h.is_v6() or event.id.resp_h.is_v6() {
        protocol_ver_id = 6
      } else {
        protocol_ver_id = 4
      }
      this = {
        // --- Classification (required) ---
        activity_id: activity_id,
        category_uid: 4,
        class_uid: class_uid,
        type_id: class_uid * 100 + activity_id,
        severity_id: 1,
        // --- Classification (optional) ---
        activity_name: activity_name,
        category_name: "Network Activity",
        class_name: "Network Activity",
        severity: "Informational",
        // TODO: provide a function for this and make it possible to reference
        // `type_id` from the same assignment.
        //type_name: ocsf_type_name(type_id),
        // --- Occurrence (required) ---
        time: event.ts,
        // --- Occurrence (recommended) ---
        // TODO: provide a function for this
        //timezone_offset: ..
        // --- Occurrence (optional) ---
        duration: event.duration,
        end_time: event.ts + event.duration,
        start_time: event.ts,
        // --- Context (required) ---
        metadata: {
          log_name: "conn", // Zeek calls it "path"
          logged_time: event._write_ts,
          product: {
            name: "Zeek",
            vendor_name: "Zeek",
          },
          uid: event.uid,
          version: "1.3.0",
        },
        // --- Context (optional) ---
        unmapped: event,
        // --- Primary (required) ---
        dst_endpoint: {
          ip: event.id.resp_h,
          port: event.id.resp_p,
          // TODO: start a conversation in the OCSF Slack to figure out how to
          // assign the entire connection a protocol. We use svc_name as the
          // next best thing, but it clearly can't be different between
          // endpoints for the service semantics that Zeek has.
          svc_name: event.service,
        },
        // --- Primary (recommended) ---
        connection_info: {
          uid: event.community_id,
          direction: direction,
          direction_id: direction_id,
          protocol_ver_id: protocol_ver_id,
          protocol_name: event.proto,
          protocol_num: protocol_num,
        },
        src_endpoint: {
          ip: event.id.orig_h,
          port: event.id.orig_p,
          svc_name: event.service,
        },
        // TODO: we actually could go deeper into the `conn_state` field and
        // choose a more accurate status. But this would require string
        // manipulations and/or regex matching, which TQL doesn't have yet.
        status: "Other",
        status_code: event.conn_state,
        status_id: 99,
        traffic: {
          bytes_in: event.resp_bytes,
          bytes_out: event.orig_bytes,
          packets_in: event.resp_pkts,
          packets_out: event.orig_pkts,
          total_bytes: event.orig_bytes + event.resp_bytes,
          total_packets: event.orig_pkts + event.resp_pkts,
        },
        // --- Primary (optional) ---
        // TODO
        // - `ja4_fingerprint_list`: once we have some sample logs with JA4
        //   fingerprints, which requires an additional Zeek package, we should
        //   populate them here.
        // - `tls`: if we buffer ssl log for this connection, we could add the
        //   information in here.
      }
      // Drop all the mapped fields.
      drop(
        unmapped._write_ts,
        unmapped.community_id,
        unmapped.conn_state,
        unmapped.duration,
        unmapped.id,
        unmapped.local_orig,
        unmapped.local_resp,
        unmapped.orig_bytes,
        unmapped.orig_pkts,
        unmapped.proto,
        unmapped.resp_bytes,
        unmapped.resp_pkts,
        unmapped.service,
        unmapped.ts,
        unmapped.uid,
      )
      @name = "ocsf.network_activity"
      publish "ocsf.network_activity"

  map-dns-to-ocsf:
    name: dns.log to OCSF DNS Activity
    description: Maps Zeek DNS logs to OCSF DNS Activity.
    definition: |
      // tql2
      subscribe "zeek"
      where @name == "zeek.dns"
      this = { event: this }
      class_uid = 4003
      activity_id = 6
      activity_name = "Traffic"
      if event.proto == "tcp" {
        protocol_num = 6
      } else if event.proto == "udp" {
        protocol_num = 17
      } else if event.proto == "icmp" {
        protocol_num = 1
      } else {
        protocol_num = -1
      }
      if event.id.orig_h.is_v6() or event.id.resp_h.is_v6() {
        protocol_ver_id = 6
      } else {
        protocol_ver_id = 4
      }
      this = {
        // --- Classification (required) ---
        activity_id: activity_id,
        category_uid: 4,
        class_uid: class_uid,
        type_id: class_uid * 100 + activity_id,
        severity_id: 1,
        // --- Classification (optional) ---
        activity_name: activity_name,
        category_name: "Network Activity",
        class_name: "DNS Activity",
        severity: "Informational",
        // TODO: provide a function for this and make it possible to reference
        // `type_id` from the same assignment.
        //type_name: ocsf_type_name(type_id),
        // --- Occurrence (required) ---
        time: event.ts,
        // --- Occurrence (recommended) ---
        // TODO: provide a function for this
        //timezone_offset: ..
        // --- Occurrence (optional) ---
        start_time: event.ts,
        // --- Context (required) ---
        metadata: {
          log_name: "dns", // Zeek calls it "path"
          logged_time: event._write_ts,
          product: {
            name: "Zeek",
            vendor_name: "Zeek",
          },
          uid: event.uid,
          version: "1.3.0",
        },
        // --- Context (optional) ---
        unmapped: event,
        // --- Primary (recommended) ---
        query: {
          class: event.qclass_name,
          hostname: event.query,
          // TODO: go deeper and extract the log semantics.
          //opcode_id: 0,
          type: event.qtype_name,
        },
        connection_info: {
          direction: "Other",
          direction_id: 99,
          protocol_ver_id: protocol_ver_id,
          protocol_name: event.proto,
          protocol_num: protocol_num,
        },
        dst_endpoint: {
          ip: event.id.resp_h,
          port: event.id.resp_p,
        },
        src_endpoint: {
          ip: event.id.orig_h,
          port: event.id.orig_p,
        },
        query_time: event.ts,
        rcode: event.rcode_name,
        rcode_id: event.rcode,
        response_time: event.ts,
        status: "Other",
        status_id: 99,
      }
      //python "
      //  xs = [{'rdata': a, 'ttl': t} for a, t in zip(self.event.answers, self.event.TTLs)]
      //  self.answers = xs
      //"
      // Drop all the mapped fields.
      drop(
        unmapped._write_ts,
        unmapped.answers,
        unmapped.id,
        unmapped.proto,
        unmapped.qclass_name,
        unmapped.qtype_name,
        unmapped.query,
        unmapped.rcode_name,
        unmapped.rcode,
        unmapped.ts,
        unmapped.uid,
        unmapped.TTLs,
      )
      @name = "ocsf.dns_activity"
      publish "ocsf.dns_activity"

  map-http-to-ocsf:
    name: http.log to OCSF HTTP Activity
    description: Maps Zeek HTTP logs to OCSF HTTP Activity.
    definition: |
      // tql2
      subscribe "zeek"
      where @name == "zeek.http"
      this = { event: this }
      class_uid = 4002
      activity_name = event.method
      if event.method == "CONNECT" {
        activity_id = 1
      } else if event.method == "DELETE" {
        activity_id = 2
      } else if event.method == "GET" {
        activity_id = 3
      } else if event.method == "HEAD" {
        activity_id = 4
      } else if event.method == "OPTIONS" {
        activity_id = 5
      } else if event.method == "POST" {
        activity_id = 6
      } else if event.method == "PUT" {
        activity_id = 7
      } else if event.method == "TRACE" {
        activity_id = 8
      } else {
        activity_id = 0
      }
      if event.id.orig_h.is_v6() or event.id.resp_h.is_v6() {
        protocol_ver_id = 6
      } else {
        protocol_ver_id = 4
      }
      this = {
        // --- Classification (required) ---
        activity_id: activity_id,
        category_uid: 4,
        class_uid: class_uid,
        type_id: class_uid * 100 + activity_id,
        severity_id: 1,
        // --- Classification (optional) ---
        activity_name: activity_name,
        category_name: "Network Activity",
        class_name: "HTTP Activity",
        severity: "Informational",
        // TODO: provide a function for this and make it possible to reference
        // `type_id` from the same assignment.
        //type_name: ocsf_type_name(type_id),
        // --- Occurrence (required) ---
        time: event.ts,
        // --- Occurrence (optional) ---
        start_time: event.ts,
        // --- Context (required) ---
        metadata: {
          log_name: "http", // Zeek calls it "path"
          logged_time: event._write_ts,
          product: {
            name: "Zeek",
            vendor_name: "Zeek",
          },
          uid: event.uid,
          version: "1.3.0",
        },
        // --- Context (optional) ---
        unmapped: event,
        // --- Primary (required) ---
        dst_endpoint: {
          ip: event.id.resp_h,
          port: event.id.resp_p,
        },
        http_request: {
           http_method: event.method,
           referrer: event.referrer,
           url: {
             hostname: event.host,
             // FIXME: Zeek's uri field is actually the path plus all
             // parameters. We just map this temporarily to path until we have
             // better string manipulation functions in TQL, e.g., splitting.
             path: event.uri,
           },
           user_agent: event.user_agent,
           version: event.version,
        },
        http_response: {
          code: event.status_code,
          status: event.status_msg,
        },
        // --- Primary (recommended) ---
        connection_info: {
          direction: "Other",
          direction_id: 99,
          protocol_ver_id: protocol_ver_id,
          protocol_name: "tcp",
          protocol_num: 6,
        },
        src_endpoint: {
          ip: event.id.orig_h,
          port: event.id.orig_p,
        },
        status: "Other",
        status_id: 99,
      }
      // Drop all the mapped fields.
      drop(
        unmapped.method,
        unmapped.id,
        unmapped.ts,
        unmapped._write_ts,
        unmapped.uid,
        unmapped.referrer,
        unmapped.host,
        unmapped.uri,
        unmapped.user_agent,
        unmapped.version,
        unmapped.status_code,
        unmapped.status_msg,
      )
      @name = "ocsf.http_activity"
      publish "ocsf.http_activity"

  map-dhcp-to-ocsf:
    name: dhcp.log to OCSF DHCP Activity
    description: Maps Zeek DHCP logs to OCSF DHCP Activity.
    definition: |
      // tql2
      subscribe "zeek"
      where @name == "zeek.dhcp"
      // Zeek's DHCP log is an aggregation of multiple packets that constitute a
      // DORA "session". See https://docs.zeek.org/en/master/logs/dhcp.html for
      // details. In OCSF, an event represents a single DORA message, which is
      // why we simply unroll the array.
      // Note that doesn't emit an event when DHCP lease expires, so there is no
      // EXPIRE message type.
      legacy "unroll msg_types"
      this = { event: this }
      class_uid = 4004
      if event.msg_types == "DISCOVER" {
        activity_id = 1
        activity_name = "Discover"
      } else if event.msg_types == "OFFER" {
        activity_id = 2
        activity_name = "Offer"
      } else if event.msg_types == "REQUEST" {
        activity_id = 3
        activity_name = "Request"
      } else if event.msg_types == "DECLINE" {
        activity_id = 4
        activity_name = "Decline"
      } else if event.msg_types == "ACK" {
        activity_id = 5
        activity_name = "Ack"
      } else if event.msg_types == "NAK" {
        activity_id = 6
        activity_name = "Nak"
      } else if event.msg_types == "RELEASE" {
        activity_id = 7
        activity_name = "Release"
      } else if event.msg_types == "INFORM" {
        activity_id = 8
        activity_name = "Inform"
      } else {
        activity_id = 0
        activity_name = "Other"
      }
      if event.id.orig_h.is_v6() or event.id.resp_h.is_v6() {
        protocol_ver_id = 6
      } else {
        protocol_ver_id = 4
      }
      this = {
        // --- Classification (required) ---
        activity_id: activity_id,
        category_uid: 4,
        class_uid: class_uid,
        type_id: class_uid * 100 + activity_id,
        severity_id: 1,
        // --- Classification (optional) ---
        activity_name: activity_name,
        category_name: "Network Activity",
        class_name: "DHCP Activity",
        severity: "Informational",
        // --- Occurrence (required) ---
        time: event.ts,
        // --- Occurrence (optional) ---
        // The duration is the time from the first to the last DORA message that
        // Zeek aggregates into a single log.
        duration: event.duration,
        end_time: event.ts + event.duration,
        start_time: event.ts,
        // --- Context (required) ---
        metadata: {
          log_name: "dhcp",
          logged_time: event._write_ts,
          product: {
            name: "Zeek",
            vendor_name: "Zeek",
          },
          version: "1.3.0",
        },
        // --- Context (optional) ---
        unmapped: event,
        // --- Primary (recommended) ---
        connection_info: {
          direction: "Other",
          direction_id: 99,
          protocol_ver_id: protocol_ver_id,
          protocol_name: "udp",
          protocol_num: 17,
        },
        dst_endpoint: {
          ip: event.server_addr,
          domain: event.domain,
        },
        src_endpoint: {
          hostname: event.host_name,
          ip: event.client_addr,
          domain: event.client_fqdn,
          mac: event.mac,
        },
        lease_duration: event.lease_time,
        status: "Other",
        status_id: 99,
        transaction_uid: trans_id,
      }
      // Drop all the mapped fields.
      drop(
        // TODO: find a better way to map the *set* of UIDs. Since there are
        // multiple per DORA session, we can't just map them to the singleton
        // `metadata.uid`.
        unmapped.uids,
        unmapped.msg_types,
        unmapped.ts,
        unmapped.duration,
        unmapped.lease_time,
        unmapped.trans_id,
        unmapped.server_addr,
        unmapped.client_addr,
        unmapped.mac,
        unmapped.host_name,
        unmapped._write_ts,
        unmapped.domain,
        unmapped.client_fqdn,
        // TODO: we could map client and server message to the single primary
        // attribute `message` in the event class.
        unmapped.client_message,
        unmapped.server_message,
      )
      @name = "ocsf.dhcp_activity"
      publish "ocsf.dhcp_activity"
