id: zeek-ocsf
name: Zeek OCSF Mappings
author: Tenzir
author_icon: https://raw.githubusercontent.com/tenzir/library/main/author.svg
package_icon: |
  https://raw.githubusercontent.com/tenzir/library/main/zeek-ocsf/package.svg
description: |
  [Zeek](https://zeek.org) is an open-source network security monitor that
  provides rich event logs.

  This package converts all Zeek events published on the topic `zeek` to OCSF
  and publishes the converted events on the topic `ocsf`.

pipelines:
  map-conn-to-ocsf:
    name: conn.log to OCSF Network Activity
    description: Maps Zeek connection logs to OCSF Network Activity.
    definition: |
      // tql2
      subscribe "zeek"
      where @name == "zeek.conn"
      this = { event: this }
      class_uid = 4001
      activity_id = 6
      activity_name = "Traffic"
      if event.local_orig and event.local_resp {
        direction = "Lateral"
        direction_id = 3
      } else if event.local_orig {
        direction = "Outbound"
        direction_id = 2
      } else if event.local_resp {
        direction = "Inbound"
        direction_id = 1
      } else {
        direction = "Unknown"
        direction_id = 0
      }
      if event.proto == "tcp" {
        protocol_num = 6
      } else if event.proto == "udp" {
        protocol_num = 17
      } else if event.proto == "icmp" {
        protocol_num = 1
      } else {
        protocol_num = -1
      }
      if event.id.orig_h.is_v6() or event.id.resp_h.is_v6() {
        protocol_ver_id = 6
      } else {
        protocol_ver_id = 4
      }
      this = {
        // --- Classification (required) ---
        activity_id: activity_id,
        category_uid: 4,
        class_uid: class_uid,
        type_id: class_uid * 100 + activity_id,
        severity_id: 1,
        // --- Classification (optional) ---
        activity_name: activity_name,
        category_name: "Network Activity",
        class_name: "Network Activity",
        severity: "Informational",
        // TODO: provide a function for this and make it possible to reference
        // `type_id` from the same assignment.
        //type_name: ocsf_type_name(type_id),
        // --- Occurrence (required) ---
        time: event.ts,
        // --- Occurrence (recommended) ---
        // TODO: provide a function for this
        //timezone_offset: ..
        // --- Occurrence (optional) ---
        duration: event.duration,
        end_time: event.ts + event.duration,
        start_time: event.ts,
        // --- Context (required) ---
        metadata: {
          log_name: "conn.log",
          logged_time: event._write_ts,
          product: {
            name: "Zeek",
            vendor_name: "Zeek",
            cpe_name: "cpe:2.3:a:zeek:zeek",
          },
          uid: event.uid,
          version: "1.4.0",
        },
        // --- Context (optional) ---
        app_name: event.service,
        unmapped: event,
        // --- Primary (required) ---
        dst_endpoint: {
          ip: event.id.resp_h,
          port: event.id.resp_p,
          mac: event.resp_l2_addr,
          location: {
            country: event.resp_cc,
          }
        },
        // --- Primary (recommended) ---
        connection_info: {
          community_uid: event.community_id,
          direction: direction,
          direction_id: direction_id,
          protocol_ver_id: protocol_ver_id,
          protocol_name: event.proto,
          protocol_num: protocol_num,
        },
        src_endpoint: {
          ip: event.id.orig_h,
          port: event.id.orig_p,
          mac: event.orig_l2_addr,
          location: {
            country: event.orig_cc,
          }
        },
        // TODO: we actually could go deeper into the `conn_state` field and
        // choose a more accurate status. But this would require string
        // manipulations and/or regex matching, which TQL doesn't have yet.
        status: "Other",
        status_code: event.conn_state,
        status_id: 99,
        traffic: {
          bytes_in: event.resp_bytes,
          bytes_out: event.orig_bytes,
          packets_in: event.resp_pkts,
          packets_out: event.orig_pkts,
          total_bytes: event.orig_bytes + event.resp_bytes,
          total_packets: event.orig_pkts + event.resp_pkts,
        },
        // --- Primary (optional) ---
        // TODO
        // - `ja4_fingerprint_list`: once we have some sample logs with JA4
        //   fingerprints, which requires an additional Zeek package, we should
        //   populate them here.
        // - `tls`: if we buffer ssl log for this connection, we could add the
        //   information in here.
      }
      // Drop all mapped fields.
      drop(
        unmapped._path,
        unmapped._write_ts,
        unmapped.community_id,
        unmapped.conn_state,
        unmapped.duration,
        unmapped.id,
        unmapped.local_orig,
        unmapped.local_resp,
        unmapped.orig_bytes,
        unmapped.orig_cc,
        unmapped.orig_l2_addr,
        unmapped.orig_pkts,
        unmapped.proto,
        unmapped.resp_bytes,
        unmapped.resp_cc,
        unmapped.resp_l2_addr,
        unmapped.resp_pkts,
        unmapped.service,
        unmapped.ts,
        unmapped.uid,
      )
      @name = "ocsf.network_activity"
      publish "ocsf"

  map-dns-to-ocsf:
    name: dns.log to OCSF DNS Activity
    description: Maps Zeek DNS logs to OCSF DNS Activity.
    definition: |
      // tql2
      subscribe "zeek"
      where @name == "zeek.dns"
      this = { event: this }
      class_uid = 4003
      activity_id = 6
      activity_name = "Traffic"
      if event.proto == "tcp" {
        protocol_num = 6
      } else if event.proto == "udp" {
        protocol_num = 17
      } else if event.proto == "icmp" {
        protocol_num = 1
      } else {
        protocol_num = -1
      }
      if event.id.orig_h.is_v6() or event.id.resp_h.is_v6() {
        protocol_ver_id = 6
      } else {
        protocol_ver_id = 4
      }
      this = {
        // --- Classification (required) ---
        activity_id: activity_id,
        category_uid: 4,
        class_uid: class_uid,
        type_id: class_uid * 100 + activity_id,
        severity_id: 1,
        // --- Classification (optional) ---
        activity_name: activity_name,
        category_name: "Network Activity",
        class_name: "DNS Activity",
        severity: "Informational",
        // TODO: provide a function for this and make it possible to reference
        // `type_id` from the same assignment.
        //type_name: ocsf_type_name(type_id),
        // --- Occurrence (required) ---
        time: event.ts,
        // --- Occurrence (recommended) ---
        // TODO: provide a function for this
        //timezone_offset: ..
        // --- Occurrence (optional) ---
        start_time: event.ts,
        // --- Context (required) ---
        metadata: {
          log_name: "dns.log",
          logged_time: event._write_ts,
          product: {
            name: "Zeek",
            vendor_name: "Zeek",
            cpe_name: "cpe:2.3:a:zeek:zeek",
          },
          uid: event.uid,
          version: "1.3.0",
        },
        // --- Context (optional) ---
        unmapped: event,
        // --- Primary (recommended) ---
        answers: zip(event.answers, event.TTLs).map(x, {
          rdata: x.left,
          ttl: x.right,
        }),
        query: {
          class: event.qclass_name,
          hostname: event.query,
          // TODO: go deeper and extract the log semantics.
          //opcode_id: 0,
          type: event.qtype_name,
        },
        connection_info: {
          direction: "Other",
          direction_id: 99,
          protocol_ver_id: protocol_ver_id,
          protocol_name: event.proto,
          protocol_num: protocol_num,
        },
        dst_endpoint: {
          ip: event.id.resp_h,
          port: event.id.resp_p,
        },
        src_endpoint: {
          ip: event.id.orig_h,
          port: event.id.orig_p,
        },
        query_time: event.ts,
        rcode: event.rcode_name,
        rcode_id: event.rcode,
        response_time: event.ts,
        status: "Other",
        status_id: 99,
      }
      // Drop all mapped fields.
      drop(
        unmapped._path,
        unmapped._write_ts,
        unmapped.answers,
        unmapped.id,
        unmapped.proto,
        unmapped.qclass_name,
        unmapped.qtype_name,
        unmapped.query,
        unmapped.rcode_name,
        unmapped.rcode,
        unmapped.ts,
        unmapped.uid,
        unmapped.TTLs,
      )
      @name = "ocsf.dns_activity"
      publish "ocsf"

  map-http-to-ocsf:
    name: http.log to OCSF HTTP Activity
    description: Maps Zeek HTTP logs to OCSF HTTP Activity.
    definition: |
      // tql2
      subscribe "zeek"
      where @name == "zeek.http"
      this = { event: this }
      class_uid = 4002
      activity_name = event.method
      if event.method == "CONNECT" {
        activity_id = 1
      } else if event.method == "DELETE" {
        activity_id = 2
      } else if event.method == "GET" {
        activity_id = 3
      } else if event.method == "HEAD" {
        activity_id = 4
      } else if event.method == "OPTIONS" {
        activity_id = 5
      } else if event.method == "POST" {
        activity_id = 6
      } else if event.method == "PUT" {
        activity_id = 7
      } else if event.method == "TRACE" {
        activity_id = 8
      } else {
        activity_id = 0
      }
      if event.id.orig_h.is_v6() or event.id.resp_h.is_v6() {
        protocol_ver_id = 6
      } else {
        protocol_ver_id = 4
      }
      this = {
        // --- Classification (required) ---
        activity_id: activity_id,
        category_uid: 4,
        class_uid: class_uid,
        type_id: class_uid * 100 + activity_id,
        severity_id: 1,
        // --- Classification (optional) ---
        activity_name: activity_name,
        category_name: "Network Activity",
        class_name: "HTTP Activity",
        severity: "Informational",
        // TODO: provide a function for this and make it possible to reference
        // `type_id` from the same assignment.
        //type_name: ocsf_type_name(type_id),
        // --- Occurrence (required) ---
        time: event.ts,
        // --- Occurrence (optional) ---
        start_time: event.ts,
        // --- Context (required) ---
        metadata: {
          log_name: "http.log",
          logged_time: event._write_ts,
          product: {
            name: "Zeek",
            vendor_name: "Zeek",
            cpe_name: "cpe:2.3:a:zeek:zeek",
          },
          uid: event.uid,
          version: "1.3.0",
        },
        // --- Context (optional) ---
        unmapped: event,
        // --- Primary (required) ---
        dst_endpoint: {
          ip: event.id.resp_h,
          port: event.id.resp_p,
        },
        http_request: {
           http_method: event.method,
           referrer: event.referrer,
           url: {
             hostname: event.host,
             // FIXME: Zeek's uri field is actually the path plus all
             // parameters. We just map this temporarily to path until we have
             // better string manipulation functions in TQL, e.g., splitting.
             path: event.uri,
           },
           user_agent: event.user_agent,
           version: event.version,
        },
        http_response: {
          code: event.status_code,
          status: event.status_msg,
        },
        // --- Primary (recommended) ---
        connection_info: {
          direction: "Other",
          direction_id: 99,
          protocol_ver_id: protocol_ver_id,
          protocol_name: "tcp",
          protocol_num: 6,
        },
        src_endpoint: {
          ip: event.id.orig_h,
          port: event.id.orig_p,
        },
        status: "Other",
        status_id: 99,
      }
      // Drop all mapped fields.
      drop(
        unmapped._path,
        unmapped._write_ts,
        unmapped.method,
        unmapped.id,
        unmapped.ts,
        unmapped.uid,
        unmapped.referrer,
        unmapped.host,
        unmapped.uri,
        unmapped.user_agent,
        unmapped.version,
        unmapped.status_code,
        unmapped.status_msg,
      )
      @name = "ocsf.http_activity"
      publish "ocsf"

  map-dhcp-to-ocsf:
    name: dhcp.log to OCSF DHCP Activity
    description: Maps Zeek DHCP logs to OCSF DHCP Activity.
    definition: |
      // tql2
      subscribe "zeek"
      where @name == "zeek.dhcp"
      // Zeek's DHCP log is an aggregation of multiple packets that constitute a
      // DORA "session". See https://docs.zeek.org/en/master/logs/dhcp.html for
      // details. In OCSF, an event represents a single DORA message, which is
      // why we simply unroll the array.
      // Note that doesn't emit an event when DHCP lease expires, so there is no
      // EXPIRE message type.
      legacy "unroll msg_types"
      this = { event: this }
      class_uid = 4004
      if event.msg_types == "DISCOVER" {
        activity_id = 1
        activity_name = "Discover"
      } else if event.msg_types == "OFFER" {
        activity_id = 2
        activity_name = "Offer"
      } else if event.msg_types == "REQUEST" {
        activity_id = 3
        activity_name = "Request"
      } else if event.msg_types == "DECLINE" {
        activity_id = 4
        activity_name = "Decline"
      } else if event.msg_types == "ACK" {
        activity_id = 5
        activity_name = "Ack"
      } else if event.msg_types == "NAK" {
        activity_id = 6
        activity_name = "Nak"
      } else if event.msg_types == "RELEASE" {
        activity_id = 7
        activity_name = "Release"
      } else if event.msg_types == "INFORM" {
        activity_id = 8
        activity_name = "Inform"
      } else {
        activity_id = 0
        activity_name = "Other"
      }
      if event.id.orig_h.is_v6() or event.id.resp_h.is_v6() {
        protocol_ver_id = 6
      } else {
        protocol_ver_id = 4
      }
      this = {
        // --- Classification (required) ---
        activity_id: activity_id,
        category_uid: 4,
        class_uid: class_uid,
        type_id: class_uid * 100 + activity_id,
        severity_id: 1,
        // --- Classification (optional) ---
        activity_name: activity_name,
        category_name: "Network Activity",
        class_name: "DHCP Activity",
        severity: "Informational",
        // --- Occurrence (required) ---
        time: event.ts,
        // --- Occurrence (optional) ---
        // The duration is the time from the first to the last DORA message that
        // Zeek aggregates into a single log.
        duration: event.duration,
        end_time: event.ts + event.duration,
        start_time: event.ts,
        // --- Context (required) ---
        metadata: {
          log_name: "dhcp.log",
          logged_time: event._write_ts,
          product: {
            name: "Zeek",
            vendor_name: "Zeek",
            cpe_name: "cpe:2.3:a:zeek:zeek",
          },
          version: "1.3.0",
        },
        // --- Context (optional) ---
        unmapped: event,
        // --- Primary (recommended) ---
        connection_info: {
          direction: "Other",
          direction_id: 99,
          protocol_ver_id: protocol_ver_id,
          protocol_name: "udp",
          protocol_num: 17,
        },
        dst_endpoint: {
          ip: event.server_addr,
          domain: event.domain,
        },
        src_endpoint: {
          hostname: event.host_name,
          ip: event.client_addr,
          domain: event.client_fqdn,
          mac: event.mac,
        },
        lease_duration: event.lease_time,
        status: "Other",
        status_id: 99,
        transaction_uid: trans_id,
      }
      // Drop all mapped fields.
      drop(
        unmapped._path,
        unmapped._write_ts,
        // TODO: find a better way to map the *set* of UIDs. Since there are
        // multiple per DORA session, we can't just map them to the singleton
        // `metadata.uid`.
        unmapped.uids,
        unmapped.msg_types,
        unmapped.ts,
        unmapped.duration,
        unmapped.lease_time,
        unmapped.trans_id,
        unmapped.server_addr,
        unmapped.client_addr,
        unmapped.mac,
        unmapped.host_name,
        unmapped.domain,
        unmapped.client_fqdn,
        // TODO: we could map client and server message to the single primary
        // attribute `message` in the event class.
        unmapped.client_message,
        unmapped.server_message,
      )
      @name = "ocsf.dhcp_activity"
      publish "ocsf"

  map-ssh-to-ocsf:
    name: ssh.log to OCSF SSH Activity
    description: Maps Zeek SSH logs to OCSF SSH Activity.
    definition: |
      // tql2
      // The Direction enum in Zeek can be INBOUND, OUTBOUND, BIDIRECTIONAL, or
      // NO_DIRECTION. NB: there is no equivalent to Lateral in Zeek, so we
      // cannot map to it.
      let $direction = {
        // The connection originator is not within the locally-monitored
        // network, but the other endpoint is.
        INBOUND: {
          id: 1,
          name: "Inbound",
        },
        // The connection originator is within the locally-monitored network,
        // but the other endpoint is not.
        OUTBOUND: {
          id: 2,
          name: "Outbound",
        },
        // Only one endpoint is within the locally-monitored network, meaning
        // the connection is either outbound or inbound.
        BIDIRECTIONAL: {
          id: 0,
          name: "Unknown"
        },
        // This value doesn't match any connection.
        NO_DIRECTION: {
          id: 0,
          name: "Unknown"
        },
      }
      subscribe "zeek"
      where @name == "zeek.ssh"
      // The Authentication Type can be deduced if we have the `inferences`
      // package.
      if "KS" in event.inferences {
        auth_type_id = 4
        auth_type = "Keyboard Interactive"
      } else {
        auth_type = 0
        auth_type = "Unknown"
      }
      this = { event: this }
      class_uid = 4007
      // The activity attributes relate to the underlying TCP connection. Since
      // we have a ssh.log entry, it means we already have an established
      // connection and must assume data is being exchanged, even if it's just
      // the SSH handshake.
      activity_id = 6
      activity_name = "Traffic"
      // The Authentication Type can be deduced if we have the `inferences`
      // package.
      if "KS" in event.inferences {
        auth_type_id = 4
        auth_type = "Keyboard Interactive"
      } else {
        auth_type_id = 0
        auth_type = "Unknown"
      }
      // Map direction.
      // The activity attributes relate to the underlying TCP connection. Since
      // we have a ssh.log entry, it means we already have an established
      // connection and must assume data is being exchanged, even if it's just
      // the SSH handshake.
      direction = $direction[event.direction].name
      direction_id = $direction[event.direction].id
      // Map network layer protocol version.
      if event.id.orig_h.is_v6() or event.id.resp_h.is_v6() {
        protocol_ver_id = 6
      } else {
        protocol_ver_id = 4
      }
      // Adjust the severity.
      if "ABP" in event.inferences or "BFS" in event.inferences {
        // Client authentication bypass (ABP) or brute force success (BFS) are
        // worthwhile escalating.
        severity_id = 4
        severity = "High"
      } else if "BF" in event.inferences \
        or "SV" in event.inferences \
        or "SC" in event.inferences \
        or "SC" in event.inferences {
        // Noteworthy are brute force attempts (BF), version scanning (SV),
        // capability scanning (SC), or other scanning (SP).
        severity_id = 3
        severity = "Medium"
      } else {
        // Every thing else is standard.
        severity_id = 1
        severity = "Informational"
      }
      // Adjust the severity.
      if "ABP" in event.inferences or "BFS" in event.inferences {
        // Client authentication bypass (ABP) or brute force success (BFS) are
        // worthwhile escalating.
        severity_id = 4
        severity = "High"
      } else if "BF" in event.inferences \
        or "SV" in event.inferences \
        or "SC" in event.inferences \
        or "SC" in event.inferences {
        // Noteworthy are brute force attempts (BF), version scanning (SV),
        // capability scanning (SC), or other scanning (SP).
        severity_id = 3
        severity = "Medium"
      } else {
        // Every thing else is standard.
        severity_id = 1
        severity = "Informational"
      }
      this = {
        // --- Classification (required) ---
        activity_id: activity_id,
        category_uid: 4,
        class_uid: class_uid,
        type_id: class_uid * 100 + activity_id,
        severity_id: severity_id,
        // --- Classification (optional) ---
        activity_name: activity_name,
        category_name: "Network Activity",
        class_name: "SSH Activity",
        severity: severity,
        // --- Occurrence (required) ---
        time: event.ts,
        // --- Occurrence (optional) ---
        count: event.auth_attempts,
        start_time: event.ts,
        // --- Context (required) ---
        metadata: {
          log_name: "ssh.log",
          logged_time: event._write_ts,
          product: {
            name: "Zeek",
            vendor_name: "Zeek",
            cpe_name: "cpe:2.3:a:zeek:zeek",
          },
          uid: event.uid,
          version: "1.3.0",
        },
        // --- Context (optional) ---
        unmapped: event,
        // --- Primary (required) ---
        dst_endpoint: {
          ip: event.id.resp_h,
          port: event.id.resp_p,
          agent_list: [{
            name: event.server,
            type: "Remote Access",
            type_id: 9,
          }]
        },
        // --- Primary (recommended) ---
        auth_type: auth_type,
        auth_type_id: auth_type_id,
        client_hassh: {
          algorithm: event.hasshAlgorithms,
          fingerprint: event.hassh,
        },
        connection_info: {
          direction: direction,
          direction_id: direction_id,
          protocol_ver_id: protocol_ver_id,
          protocol_name: "tcp",
          protocol_num: 6,
        },
        server_hassh: {
          algorithm: event.hasshServerAlgorithms,
          fingerprint: event.hasshServer,
        },
        src_endpoint: {
          ip: event.id.orig_h,
          port: event.id.orig_p,
          agent_list: [{
            name: event.client,
            type: "Remote Access",
            type_id: 9,
          }]
        },
        status: "Other",
        status_id: 99,
        // --- Primary (optional) ---
      }
      // Drop all mapped fields.
      drop (
        unmapped._path,
        unmapped._write_ts,
        unmapped.auth_attempts,
        unmapped.client,
        unmapped.direction,
        unmapped.hassh,
        unmapped.hasshAlgorithms,
        unmapped.hasshServer,
        unmapped.hasshServerAlgorithms,
        unmapped.id,
        unmapped.proto,
        unmapped.server,
        unmapped.service,
        unmapped.ts,
        unmapped.uid,
      )
      @name = "ocsf.ssh_activity"
      publish "ocsf"

  map-smb-files-to-ocsf:
    name: smb_files.log to OCSF SMB Activity
    description: Maps Zeek SMB files logs to OCSF SMB Activity.
    definition: |
      // tql2
      subscribe "zeek"
      where @name == "zeek.smb_files"
      this = { event: this }
      class_uid = 4006
      // The Zeek actions don't naturally map to the corresponding OCSF event
      // class. Zeek actions have the pattern `SMB::{TYPE}_{ACTION}` where
      // `TYPE` is one of `FILE`, `PIPE`, or `PRINT`.
      if event.action.ends_with("_OPEN") {
        activity_id = 2
        activity_name = "File Open"
      } else {
        activity_id = 99
        activity_name = "Other"
      }
      if event.action.starts_with("SMB::FILE") {
        share_type_id = 1
        share_type_name = "File"
      } else if event.action.starts_with("SMB::PIPE") {
        share_type_id = 2
        share_type_name = "Pipe"
      } else if event.action.starts_with("SMB::PRINT") {
        share_type_id = 3
        share_type_name = "Print"
      } else {
        share_type_id = 0
        share_type_name = "Unknown"
      }
      if event.id.orig_h.is_v6() or event.id.resp_h.is_v6() {
        protocol_ver_id = 6
      } else {
        protocol_ver_id = 4
      }
      this = {
        // --- Classification (required) ---
        activity_id: activity_id,
        category_uid: 4,
        class_uid: class_uid,
        type_id: class_uid * 100 + activity_id,
        severity_id: 1,
        // --- Classification (optional) ---
        activity_name: activity_name,
        category_name: "Network Activity",
        class_name: "SMB Activity",
        severity: "Informational",
        // --- Occurrence (required) ---
        time: event.ts,
        // --- Occurrence (optional) ---
        start_time: event.ts,
        // --- Context (required) ---
        metadata: {
          log_name: "smb_files.log",
          logged_time: event._write_ts,
          product: {
            name: "Zeek",
            vendor_name: "Zeek",
            cpe_name: "cpe:2.3:a:zeek:zeek",
          },
          uid: event.uid,
          version: "1.3.0",
        },
        // --- Context (optional) ---
        unmapped: event,
        // --- Primary (required) ---
        dst_endpoint: {
          ip: event.id.resp_h,
          port: event.id.resp_p,
        },
        // --- Primary (recommended) ---
        connection_info: {
          direction: "Other",
          direction_id: 99,
          protocol_ver_id: protocol_ver_id,
          protocol_name: "tcp",
          protocol_num: 6,
        },
        file: path,
        src_endpoint: {
          ip: event.id.orig_h,
          port: event.id.orig_p,
        },
        share: event.name,
        status: "Other",
        status_id: 99,
        // --- Primary (optional) ---
      }
      // Drop all mapped fields.
      drop (
        unmapped._write_ts,
        unmapped.id,
        unmapped.proto,
        unmapped.service,
        unmapped.ts,
        unmapped.uid,
        unmapped.name,
        unmapped.path,
      )
      @name = "ocsf.smb_activity"
      publish "ocsf"

  # TODO:
  # - We need to generate one Email URL Activity event for each element in the
  #   `url` array. This means that must generate a UUID in this event and use
  #   the same UUID in all URL Activity events so that they become linked.
  # - The Zeek log contains file UIDs (fuids) that may be relevant for
  #   corresponding Network File Activity events.
  map-smtp-to-ocsf:
    name: smtp.log to OCSF Email Activity
    description: Maps Zeek SMTP logs to OCSF Email Activity.
    definition: |
      // tql2
      subscribe "zeek"
      where @name == "zeek.smtp"
      this = { event: this }
      class_uid = 4009
      activity_id = 1
      activity_name = "Send"
      if event.id.orig_h.is_v6() or event.id.resp_h.is_v6() {
        protocol_ver_id = 6
      } else {
        protocol_ver_id = 4
      }
      this = {
        // --- Classification (required) ---
        activity_id: activity_id,
        category_uid: 4,
        class_uid: class_uid,
        type_id: class_uid * 100 + activity_id,
        severity_id: 1,
        // --- Classification (optional) ---
        activity_name: activity_name,
        category_name: "Network Activity",
        class_name: "Email Activity",
        severity: "Informational",
        // --- Occurrence (required) ---
        time: event.ts,
        // --- Occurrence (optional) ---
        start_time: event.ts,
        // --- Context (required) ---
        direction_id: 0,
        metadata: {
          log_name: "smtp.log",
          logged_time: event._write_ts,
          product: {
            name: "Zeek",
            vendor_name: "Zeek",
            cpe_name: "cpe:2.3:a:zeek:zeek",
          },
          uid: event.uid,
          version: "1.3.0",
        },
        // --- Context (optional) ---
        direction: "Unknown",
        unmapped: event,
        // --- Primary (required) ---
        // --- Primary (recommended) ---
        connection_info: {
          direction: "Other",
          direction_id: 99,
          protocol_ver_id: protocol_ver_id,
          protocol_name: "tcp",
          protocol_num: 6,
        },
        dst_endpoint: {
          ip: event.id.resp_h,
          port: event.id.resp_p,
          intermediate_ips: event.path,
        },
        email: {
           from: event.from,
           to: event.to,
           message_uid: event.msg_id,
           smtp_from: event.mailfrom,
           smtp_to: event.rcptto,
           subject: event.subject,
        },
        smtp_hello: event.helo,
        src_endpoint: {
          ip: event.id.orig_h,
          port: event.id.orig_p,
        },
        status: "Other",
        status_id: 99,
        status_detail: event.last_reply,
        // --- Primary (optional) ---
      }
      // Drop all mapped fields.
      drop (
        unmapped._write_ts,
        unmapped.ts,
        unmapped.uid,
        unmapped.id,
        unmapped.path,
        unmapped.from,
        unmapped.to,
        unmapped.msg_id,
        unmapped.mailfrom,
        unmapped.rcptto,
        unmapped.subject,
        unmapped.helo,
        unmapped.last_reply,
      )
      @name = "ocsf.email_activity"
      publish "ocsf"
