id: dcso-tie
name: DCSO TIE
author: Tenzir
author_icon: https://raw.githubusercontent.com/tenzir/library/main/author.svg
package_icon: |
  https://raw.githubusercontent.com/tenzir/library/main/dcso-tie/package.svg

description: |
  The [DCSO Threat Intelligence Engine
  (TIE)](https://docs.dcso.de/docs/tie/get-started/) provides premium threat
  intelligence feeds from Deutsche Cyber-Sicherheitsorganisation (DCSO), a
  leading European provider of threat intelligence services. DCSO delivers
  high-fidelity APT and threat intelligence with deep analysis of threats and
  campaigns, offering European sovereign intelligence sources for enhanced
  security operations.

  For detailed API documentation and IOC schema definitions, refer to the
  [DCSO TIE API documentation](https://docs.dcso.de/docs/tie/tiev3/ioc_schema_definition).

  This package provides the `dcso-tie` context for enrichment and
  pipelines that periodically update the feed, enabling real-time threat
  detection and intelligence-driven security workflows.

categories:
- sources

inputs:
  api-user:
    name: API user ID
    description: |
      Your DCSO TIE API user ID
    default: secret("DCSO_TIE_API_USER")

  api-key:
    name: API key
    description: |
      Your DCSO TIE API key
    default: secret("DCSO_TIE_API_KEY")

  refresh-interval:
    name: Context update interval
    description: |
      The duration between context updates that fetch IOCs from the API.
    default: 1h

  ioc-expiry:
    name: IOC expiration interval
    description: |
      The duration after which IOCs expire.
    default: 1h

  min-confidence:
    name: Minimum confidence level
    description: |
      The minimum confidence level for IOCs. Must be between 0 and 100, with
      0 being the least confident and 100 being the most confident.
    default: 0

  state:
    name: IOC lifecycle stage
    description: |
      In general, you want to filter for IOCs having the state APPROVED.
      Possible values are: `NEW`, `TO_APPROVE`, `APPROVED`, `DEPRECATED`
    type: string
    default: ALL

pipelines:
  fetch-iocs:
    name: Fetch IOCs from DCSO TIE
    description: |
      Periodically fetches the DCSO TIE feed and publishes it to the `dcso.ioc` topic.
    definition: |
      let $url = \
        "https://api.dcso.de/tie/v3/iocs" +
        "?limit=1000" +
        "&iocFeedSources=DCSO-Data%20Feed" +
        "&minConfidence={{ inputs.min-confidence }}"
      let $auth = "Basic " + encode_base64({{ inputs.api-user }} + ":" + {{ inputs.api-key }})
      every {{ inputs.refresh-interval }} {
        from_http $url,
          headers={Authorization: $auth},
          paginate=(response => f"{$url}&next={response.next}" if response.hasMore) {
          read_ndjson raw=true
        }
      }
      unroll results
      // We could use this workaround to get a dynamically typed `ioc` field.
      // But for now we keep the initial string type and defer this to a later
      // point.
      //set this = {...results.print_json().parse_json()}
      set this = {...results}
      where state == {{ inputs.state }} or {{ inputs.state }} == "ALL"
      set @name = "dcso.ioc"
      publish "dcso"
    restart-on-error: true

  normalize-iocs-to-ocsf:
    name: Normalize DCSO TIE IOCs to OCSF
    description: |
      Converts DCSO TIE IOCs to OCSF OSINT objects.
    definition: |
      // TODO: discretize confidence into OCSF's confidence_id
      // Official schema definition: https://docs.dcso.de/docs/tie/tiev3/ioc_schema_definition
      let $type_ids = {
        domain: 2,
        domainPort: 99,
        ip: 1,
        ipPort: 99,
        md5: 4,
        filename: 11,
        filepath: 11,
        email: 9, // API mismatch, doesn't exist in docs but in data
        emailAddress: 9,
        emailSubject: 8,
        registryKey: 12,
        registryValue: 13,
        mutex: 99,
        sha1: 4,
        sha256: 4,
        ssdeep: 4,
        url: 5,
        userAgent: 6,
      }
      let $tlps = {
        clear: "CLEAR",
        green: "GREEN",
        amber: "AMBER",
        "amber+strict": "AMBER STRICT",
        red: "RED",
      }
      // --- OSINT Object ----
      //subscribe "dcso"
      export | where @name == "dcso.ioc"
      set this = {osint: {}, tie: this}
      set tactics = tie.mitreTactics.map(x => {
        tactic: {
          uid: x
        }
      })
      set techniques = tie.mitreTechniques.map(x => {
        technique: {
          uid: x
        }
      })
      set osint.attacks = [...(move tactics), ...(move techniques)]
      drop tie.mitreTactics, tie.mitreTechniques
      set osint.campaigns = tie.targetCampaigns.map(x => {
        name: x
      })
      // The TIE confidence is in [0,100].
      if (tie.confidence != null) {
        if (tie.confidence < 30) {
          set osint.confidence_id = 1 // Low
        } else if (tie.confidence < 70) {
          set osint.confidence_id = 2 // Medium
        } else {
          set osint.confidence_id = 3 // High
        }
        drop tie.confidence
      }
      drop tie.targetCampaigns
      move osint.created_time = tie.created
      move osint.labels = tie.tags
      // This is not the best place to put the MISP event IDs.
      set osint.malware = tie.malpedia?.map(x => {
        name: x,
        classification_ids: [0], // unknown
      })
      drop tie.malpedia
      move osint.modified_time = tie.modified
      move osint.references = tie.eventIDs
      set osint.src_url = "https://api.dcso.de/tie/v3/iocs/" + encode_url(tie.ioc.string())
      set osint.tlp_level = $tlps[move tie.tlpLevel]?
      set osint.threat_actors = tie.threatActors?.map(x => {
        name: x,
      })
      drop tie.threatActors
      set osint.type_id = $type_ids[move tie.iocType]
      // The TIE severity is in [0,100].
      if (tie.severity != null) {
        if (tie.severity < 20) {
          set osint.severity_id = 1 // Informational
        } else if (tie.severity < 40) {
          set osint.severity_id = 2 // Low
        } else if (tie.severity < 60) {
          set osint.severity_id = 3 // Medium
        } else if (tie.severity < 80) {
          set osint.severity_id = 4 // High
        } else if (tie.severity < 90) {
          set osint.severity_id = 5 // Critical
        } else {
          set osint.severity_id = 6 // Fatal
        }
        drop tie.severity
      }
      move osint.value = tie.ioc
      set osint.vendor_name = "DCSO"
      // ------ OSINT Inventory Info --------
      set oscf = {}
      // Classification
      set ocsf.activity_id = 2
      set ocsf.activity_name = "Collect"
      set ocsf.category_uid = 5
      set ocsf.category_name = "Discovery"
      set ocsf.class_uid = 5021
      set ocsf.class_name = "OCSF Inventory Info"
      set ocsf.severity_id = 1
      set ocsf.severity = "Informational"
      set ocsf.type_uid = ocsf.class_uid * 100 + ocsf.activity_id
      // Context
      set ocsf.actor = {
        app_name: "Tenzir"
      }
      set ocsf.metadata = {
        product: {
          name: "TIE",
          vendor_name: "DCSO",
        },
        version: "1.5.0",
      }
      set ocsf.unmapped = tie.print_ndjson()
      // Occurence
      set ocsf.time = now()
      //move ocsf.start_time = tie.firstSeen?
      //move ocsf.end_seen = tie.LastSeen?
      // Primary
      set ocsf.osint = [move osint]
      // ------ Finalize --------
      set this = {...ocsf}
      set @name = "ocsf.osint_inventory_info"
      //ocsf::apply
      publish "ocsf"
